"use client"

import { useState, useEffect, useRef } from "react"
import { useParams, useRouter } from "next/navigation"
import { useChatStore } from "@/lib/store"
import { supabase } from "@/lib/supabase"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { 
  ArrowLeft, 
  Send, 
  FileText, 
  Download, 
  Save,
  Sparkles,
  User,
  Bot,
  RotateCcw,
  MessageSquare,
  X,
  Brain,
  Lightbulb,
  Target,
  BookOpen,
  Clock,
  Zap,
  Eye,
  Heart,
  Pin,
  Edit3,
  Trash2,
  Tag
} from "lucide-react"

// モード定義
const modes = {
  inquiry: { name: "探究モード", englishName: "Inquiry Mode", color: "text-blue-400", gradient: "from-blue-400 to-cyan-400", icon: Sparkles },
  emotion: { name: "感情リフレクト", englishName: "Emotion Reflect", color: "text-pink-400", gradient: "from-pink-400 to-rose-400", icon: Heart },
  structure: { name: "思考整理モード", englishName: "Structure Mode", color: "text-purple-400", gradient: "from-purple-400 to-violet-400", icon: Brain },
  document: { name: "ドキュメントモード", englishName: "Document Insight", color: "text-cyan-400", gradient: "from-cyan-400 to-blue-400", icon: BookOpen },
  creative: { name: "創造モード", englishName: "Creative Flow", color: "text-yellow-400", gradient: "from-yellow-400 to-orange-400", icon: Lightbulb },
  reflection: { name: "リフレクションモード", englishName: "Reflective Review", color: "text-gray-400", gradient: "from-gray-400 to-slate-400", icon: Zap },
  kids: { name: "キッズモード", englishName: "Kids Dialogue", color: "text-red-400", gradient: "from-red-400 to-pink-400", icon: User },
  goal: { name: "目標モード", englishName: "Goal Planner", color: "text-green-400", gradient: "from-green-400 to-emerald-400", icon: Target },
  story: { name: "ストーリーモード", englishName: "Story Weaving", color: "text-amber-400", gradient: "from-amber-400 to-orange-400", icon: Clock }
}

// 思考促進メッセージ
const reflectionMessages = [
  "問いの深さは、視点の移動から生まれる。",
  "思考の境界を越えるとき、新しい発見がある。",
  "内省は、外の世界への窓を開く。",
  "知識は、問いと対話の中で育まれる。",
  "創造性は、制約の中で花開く。",
  "理解は、多様な視点の交差点にある。",
  "学習は、好奇心の旅路である。",
  "洞察は、静寂の中で生まれる。"
]

// 好奇心ジャンプカード
const curiosityCards = [
  "生成AIと創造性",
  "倫理と技術革新のバランス", 
  "人間中心設計とAI",
  "学習の本質とテクノロジー",
  "思考の可視化と理解",
  "知識の構造化と発見"
]

export default function ChatPage() {
  const params = useParams()
  const router = useRouter()
  const modeId = params.modeId as string
  const mode = modes[modeId as keyof typeof modes]
  
  const {
    currentSessionId,
    currentModeId,
    messages,
    memoNotes,
    showReview,
    currentReview,
    isLoading,
    isStreaming,
    setCurrentSession,
    addMessage,
    clearMessages,
    addMemoNote,
    updateMemoNote,
    deleteMemoNote,
    setLoading,
    setStreaming,
    toggleReview,
    setReview
  } = useChatStore()

  const [input, setInput] = useState("")
  const [isGeneratingReview, setIsGeneratingReview] = useState(false)
  const [reviewText, setReviewText] = useState("")
  const [isReviewStreaming, setIsReviewStreaming] = useState(false)
  const [currentReflectionMessage, setCurrentReflectionMessage] = useState("")
  const [showPastSession, setShowPastSession] = useState(false)
  const [pastSessionQuote, setPastSessionQuote] = useState("")
  const [hoveredMessageId, setHoveredMessageId] = useState<string | null>(null)
  const [editingNoteId, setEditingNoteId] = useState<string | null>(null)
  const [selectedText, setSelectedText] = useState<string>("")
  const [showSelectionPopup, setShowSelectionPopup] = useState(false)
  const [selectionPosition, setSelectionPosition] = useState({ x: 0, y: 0 })

  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  // 思考促進メッセージの循環
  useEffect(() => {
    const interval = setInterval(() => {
      const randomMessage = reflectionMessages[Math.floor(Math.random() * reflectionMessages.length)]
      setCurrentReflectionMessage(randomMessage)
    }, 8000)
    return () => clearInterval(interval)
  }, [])

  // 過去セッション引用の表示
  useEffect(() => {
    if (messages.length > 2 && !isLoading && !showPastSession) {
      setTimeout(() => {
        setPastSessionQuote("AIは人間の創造性を拡張する存在であり、その境界を探ることが私の問いです。")
        setShowPastSession(true)
      }, 2000)
    }
  }, [messages.length, isLoading, showPastSession])

  // モードが変更された場合の処理
  useEffect(() => {
    if (modeId && modeId !== currentModeId) {
      // 新しいセッションを開始
      const sessionId = `session_${Date.now()}`
      setCurrentSession(sessionId, modeId)
      clearMessages()
      // memoNotesは保持する（セッション間でノートを継続）
      setShowPastSession(false)
    }
  }, [modeId, currentModeId, setCurrentSession, clearMessages])

  // メッセージが追加されたら自動スクロール
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // セッション開始時の初期メッセージ
  useEffect(() => {
    if (currentSessionId && messages.length === 0) {
      const welcomeMessages = {
        inquiry: "こんにちは！探究モードのReflectorです。あなたの問いを深く掘り下げて、思考を次の階層へ導きましょう。何について探究したいですか？",
        emotion: "こんにちは！感情リフレクトモードのReflectorです。あなたの気持ちに寄り添い、内省をサポートします。どんな気持ちでお話ししたいですか？",
        structure: "こんにちは！思考整理モードのReflectorです。混沌とした思考を秩序へと導き、美しい構造に織り上げましょう。何を整理したいですか？",
        document: "こんにちは！ドキュメントモードのReflectorです。PDFや資料の内容を深く理解し、関連質問で理解を深めましょう。どのような資料について話したいですか？",
        creative: "こんにちは！創造モードのReflectorです。アイデア創出と発想拡張をサポートします。どんな創造的な課題に取り組みたいですか？",
        reflection: "こんにちは！リフレクションモードのReflectorです。過去の出来事の意味づけと気づきの抽出をサポートします。何を振り返りたいですか？",
        kids: "こんにちは！キッズモードのReflectorです。楽しく学べる環境を提供します。何について話したいですか？😊",
        goal: "こんにちは！目標モードのReflectorです。学習計画と実行支援をサポートします。どんな目標を持っていますか？",
        story: "こんにちは！ストーリーモードのReflectorです。経験を物語として紡ぎ、ナラティブ構造を支援します。どんな物語を紡ぎたいですか？"
      }
      
      const welcomeMessage = welcomeMessages[modeId as keyof typeof welcomeMessages] || welcomeMessages.inquiry
      addMessage('assistant', welcomeMessage)
    }
  }, [currentSessionId, messages.length, modeId, addMessage])

  const handleSendMessage = async () => {
    if (!input.trim() || isLoading) return

    const userMessage = input.trim()
    setInput("")
    addMessage('user', userMessage)
    setLoading(true)
    setStreaming(true)
    setShowPastSession(false)

    try {
      // Supabase Edge Functionを呼び出し
      const response = await fetch(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/functions/v1/generate-chat-response`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
        },
        body: JSON.stringify({
          sessionId: currentSessionId,
          modeId: modeId,
          message: userMessage,
          history: messages
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to generate response')
      }

      const reader = response.body?.getReader()
      if (!reader) {
        throw new Error('No response body')
      }

      let assistantMessage = ""
      addMessage('assistant', "")

      while (true) {
        const { done, value } = await reader.read()
        if (done) break

        const chunk = new TextDecoder().decode(value)
        assistantMessage += chunk

        // 最後のメッセージを更新
        const updatedMessages = [...messages, { role: 'user' as const, content: userMessage, id: Date.now().toString(), timestamp: new Date() }]
        const lastMessageIndex = updatedMessages.length
        updatedMessages[lastMessageIndex] = { role: 'assistant' as const, content: assistantMessage, id: (Date.now() + 1).toString(), timestamp: new Date() }
        
        // Zustandストアを直接更新（ストリーミング表示のため）
        useChatStore.setState({ messages: updatedMessages })
      }

    } catch (error) {
      console.error('Error generating response:', error)
      addMessage('assistant', '申し訳ございません。応答の生成中にエラーが発生しました。もう一度お試しください。')
    } finally {
      setLoading(false)
      setStreaming(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleCuriosityCardClick = (card: string) => {
    setInput(card)
    inputRef.current?.focus()
  }

  const handleGenerateReview = async () => {
    if (messages.length === 0) return
    
    setIsReviewStreaming(true)
    setReviewText("")
    toggleReview()
    
    try {
      const response = await fetch('/api/generate-review', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: messages,
          mode: mode.name,
          sessionId: currentSessionId
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to generate review')
      }

      const reader = response.body?.getReader()
      const decoder = new TextDecoder()

      if (reader) {
        let accumulatedText = ""
        
        while (true) {
          const { done, value } = await reader.read()
          if (done) break
          
          const chunk = decoder.decode(value)
          accumulatedText += chunk
          setReviewText(accumulatedText)
        }
      }
    } catch (error) {
      console.error('Error generating review:', error)
      setReviewText("Error generating review. Please try again.")
    } finally {
      setIsReviewStreaming(false)
    }
  }

  const handleCloseReview = () => {
    toggleReview()
    setReviewText("")
  }

  // Reflective Notes機能
  const handlePinMessage = (messageId: string, originalText: string) => {
    addMemoNote(messageId, originalText, "", [])
  }

  const handleUpdateNote = (noteId: string, userNote: string, tags: string[]) => {
    updateMemoNote(noteId, userNote, tags)
    setEditingNoteId(null)
  }

  const handleDeleteNote = (noteId: string) => {
    deleteMemoNote(noteId)
  }

  const parseTags = (text: string): string[] => {
    const tagRegex = /#(\w+)/g
    const matches = text.match(tagRegex)
    return matches ? matches.map(tag => tag.slice(1)) : []
  }

  // テキスト選択ハンドラー
  const handleTextSelection = (event: React.MouseEvent) => {
    const selection = window.getSelection()
    const selectedText = selection?.toString().trim()
    
    if (selectedText && selectedText.length > 1) {
      setSelectedText(selectedText)
      setShowSelectionPopup(true)
      setSelectionPosition({ x: event.clientX, y: event.clientY })
    } else {
      setShowSelectionPopup(false)
    }
  }

  // 選択されたテキストをピン留め
  const handlePinSelectedText = () => {
    if (selectedText) {
      addMemoNote("selected_text", selectedText, "", [])
      setShowSelectionPopup(false)
      setSelectedText("")
    }
  }

  // グローバルクリックハンドラー
  useEffect(() => {
    const handleGlobalClick = (event: MouseEvent) => {
      if (showSelectionPopup) {
        setShowSelectionPopup(false)
        setSelectedText("")
      }
    }

    document.addEventListener('click', handleGlobalClick)
    return () => document.removeEventListener('click', handleGlobalClick)
  }, [showSelectionPopup])

  if (!mode) {
    return (
      <div className="min-h-screen bg-neutral-950 text-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">モードが見つかりません</h1>
          <Button onClick={() => router.push('/dashboard')}>ダッシュボードに戻る</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-neutral-950 text-white">
      {/* ヘッダー - 洗練された知的デザイン */}
      <header className="flex items-center justify-between h-16 px-8 bg-zinc-950/80 border-b border-zinc-800/30 backdrop-blur-xl sticky top-0 z-50">
        <div className="flex items-center gap-4">
          <Button
            onClick={() => router.push('/dashboard')}
            variant="ghost"
            size="sm"
            className="text-sm text-cyan-400 hover:text-cyan-300 hover:bg-zinc-800/50 transition-all duration-200"
          >
            ← Back
          </Button>
          
          <h1 className="text-base font-semibold text-white tracking-wide">
            {mode.englishName} <span className="text-xs text-gray-400 ml-2">{mode.name}</span>
          </h1>
        </div>
        
        <div className="flex items-center gap-4">
          <div className="text-xs text-gray-500 italic">
            Reflector is ready to explore with you.
          </div>
          
          {/* レビュー生成ボタン */}
          <Button
            onClick={handleGenerateReview}
            disabled={messages.length === 0 || isReviewStreaming}
            className="bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600 shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105 text-xs px-3 py-1.5"
          >
            <FileText className="w-3 h-3 mr-1" />
            {isReviewStreaming ? 'Generating...' : 'Review'}
          </Button>
        </div>
      </header>

      {/* メインコンテンツ - 完全に新しいレイアウト構造 */}
      <div className="flex flex-row min-h-[calc(100vh-64px)]">
        
        {/* メインチャットエリア */}
        <div className="flex-grow pl-8 pr-[320px] pt-6 space-y-6">
          <div className="max-w-4xl mx-auto">
            {/* メッセージエリア */}
            <div className="space-y-6">
              {messages.map((message, index) => (
                <div
                  key={message.id || index}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} animate-in fade-in-up duration-300 relative group`}
                  style={{ animationDelay: `${index * 150}ms` }}
                  onMouseEnter={() => setHoveredMessageId(message.id)}
                  onMouseLeave={() => setHoveredMessageId(null)}
                >
                  {message.role === 'user' ? (
                    // ユーザーメッセージ - 右寄せ
                    <div className="self-end max-w-[70%] mr-4 bg-gradient-to-r from-cyan-400 to-blue-500 text-black text-sm font-medium rounded-xl px-4 py-3 shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-[1.01]">
                      <p 
                        className="leading-relaxed select-text"
                        onMouseUp={handleTextSelection}
                      >
                        {message.content}
                      </p>
                      
                      {/* ピンボタン */}
                      {hoveredMessageId === message.id && (
                        <div className="absolute -top-2 -left-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                          <Button
                            onClick={() => handlePinMessage(message.id, message.content)}
                            className="w-6 h-6 bg-zinc-800 hover:bg-zinc-700 text-white rounded-full p-0 shadow-md hover:shadow-lg transition-all duration-200"
                            title="Pin to Reflective Notes"
                          >
                            <Pin className="w-3 h-3" />
                          </Button>
                        </div>
                      )}
                    </div>
                  ) : (
                    // Reflectorメッセージ - 左寄せ
                    <div className="self-start max-w-[70%] ml-4 bg-zinc-800/70 backdrop-blur-sm rounded-xl px-4 py-3 shadow-sm hover:shadow-md transition-all duration-200 transform hover:scale-[1.01] border border-zinc-700/30">
                      {/* Reflectorラベル */}
                      <div className="flex items-center space-x-2 mb-2 opacity-80 group-hover:opacity-100 transition-opacity duration-200">
                        <span className="text-xs text-gray-400 font-medium tracking-wide">🧠 Reflector</span>
                        {isStreaming && index === messages.length - 1 && (
                          <div className="flex space-x-1">
                            <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                            <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                            <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                          </div>
                        )}
                      </div>
                      
                      {/* メッセージ内容 */}
                      <p 
                        className="text-gray-100 text-[15px] leading-relaxed tracking-normal select-text"
                        onMouseUp={handleTextSelection}
                      >
                        {message.content}
                        {isStreaming && index === messages.length - 1 && (
                          <span className="inline-block w-2 h-4 bg-gray-300 animate-pulse ml-1" />
                        )}
                      </p>
                      
                      {/* ピンボタン */}
                      {hoveredMessageId === message.id && (
                        <div className="absolute -top-2 -right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                          <Button
                            onClick={() => handlePinMessage(message.id, message.content)}
                            className="w-6 h-6 bg-zinc-800 hover:bg-zinc-700 text-white rounded-full p-0 shadow-md hover:shadow-lg transition-all duration-200"
                            title="Pin to Reflective Notes"
                          >
                            <Pin className="w-3 h-3" />
                          </Button>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
              
              {/* ローディング状態 */}
              {isLoading && (
                <div className="flex justify-start animate-in fade-in-up duration-300">
                  <div className="self-start max-w-[70%] ml-4 bg-zinc-800/70 backdrop-blur-sm rounded-xl px-4 py-3 shadow-sm border border-zinc-700/30">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-xs text-gray-400 font-medium tracking-wide">🧠 Reflector</span>
                      <div className="flex space-x-1">
                        <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                        <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                        <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                      </div>
                    </div>
                    <p className="text-gray-400 text-[15px] leading-relaxed italic">
                      Reflector is thinking...
                    </p>
                  </div>
                </div>
              )}
            </div>
            
            {/* 入力エリア - 洗練された知的デザイン */}
            <div className="mt-8 pb-6">
              <div className="relative">
                <Input
                  ref={inputRef}
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Reflectorに思考を伝えてください…"
                  disabled={isLoading}
                  className="w-full px-4 py-3 bg-zinc-800/80 backdrop-blur-sm border-zinc-700/30 text-white placeholder-gray-500 text-sm leading-relaxed rounded-xl focus:outline-none focus:ring-1 focus:ring-cyan-500/40 focus:border-cyan-500/30 transition-all duration-200 hover:bg-zinc-800/90 shadow-md"
                  autoFocus
                />
                
                {/* 送信ボタン */}
                <Button
                  onClick={handleSendMessage}
                  disabled={!input.trim() || isLoading}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-gradient-to-r from-cyan-400 to-blue-500 text-black hover:from-cyan-500 hover:to-blue-600 shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105 rounded-lg px-3 py-1.5"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
              
              {/* 入力ヒント */}
              <div className="mt-3">
                <p className="text-xs text-zinc-500 font-medium tracking-wide">
                  Press Enter to send • Shift+Enter for new line
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Reflective Notes Sidebar - 常設表示 */}
        <aside className="fixed right-0 top-16 w-[300px] h-[calc(100vh-64px)] bg-zinc-950 border-l border-zinc-800/30 shadow-lg z-50 overflow-y-auto">
          <div className="p-6">
            <h2 className="text-sm text-gray-400 tracking-wide uppercase font-medium mb-6">
              📝 Reflective Notes
            </h2>
            
            {memoNotes.length === 0 ? (
              <div className="text-xs text-gray-500 italic text-center py-8">
                Pin important messages to create your reflective notes
              </div>
            ) : (
              <div className="space-y-4">
                {memoNotes.map((note) => (
                  <div key={note.id} className="bg-zinc-900/60 rounded-md px-4 py-3 shadow-sm hover:shadow-md transition-all duration-200 relative group">
                    {/* 元のテキスト */}
                    <div className="text-xs text-gray-500 mb-2 italic">
                      "{note.original_text.length > 50 ? note.original_text.substring(0, 50) + '...' : note.original_text}"
                    </div>
                    
                    {/* ユーザーノート */}
                    {editingNoteId === note.id ? (
                      <div className="space-y-2">
                        <textarea
                          defaultValue={note.user_note}
                          className="w-full text-xs bg-zinc-800/60 border border-zinc-600/30 rounded px-2 py-1 text-gray-200 placeholder-gray-500 resize-none"
                          placeholder="Add your reflection..."
                          rows={3}
                          onBlur={(e) => {
                            const tags = parseTags(e.target.value)
                            handleUpdateNote(note.id, e.target.value, tags)
                          }}
                          onKeyDown={(e) => {
                            if (e.key === 'Enter' && e.ctrlKey) {
                              const tags = parseTags(e.currentTarget.value)
                              handleUpdateNote(note.id, e.currentTarget.value, tags)
                            }
                          }}
                          autoFocus
                        />
                        <div className="flex justify-between items-center">
                          <span className="text-xs text-gray-500">Use #tags for categorization</span>
                          <div className="flex space-x-1">
                            <Button
                              onClick={() => setEditingNoteId(null)}
                              className="w-6 h-6 bg-zinc-700 hover:bg-zinc-600 text-white rounded p-0"
                            >
                              <X className="w-3 h-3" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="space-y-2">
                        <div className="text-sm text-gray-100 mb-1 leading-relaxed">
                          {note.user_note || "Click to add your reflection..."}
                        </div>
                        
                        {/* タグ */}
                        {note.tags.length > 0 && (
                          <div className="flex flex-wrap gap-1">
                            {note.tags.map((tag, index) => (
                              <span
                                key={index}
                                className="px-1.5 py-0.5 bg-cyan-500/20 text-cyan-300 text-xs rounded"
                              >
                                #{tag}
                              </span>
                            ))}
                          </div>
                        )}
                        
                        {/* アクションボタン - Hover時のみ表示 */}
                        <div className="absolute top-2 right-2 hidden group-hover:flex gap-2">
                          <Button
                            onClick={() => setEditingNoteId(note.id)}
                            className="w-6 h-6 bg-zinc-700 hover:bg-zinc-600 text-white rounded p-0"
                            title="Edit note"
                          >
                            <Edit3 className="w-3 h-3" />
                          </Button>
                          <Button
                            onClick={() => handleDeleteNote(note.id)}
                            className="w-6 h-6 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded p-0"
                            title="Delete note"
                          >
                            <Trash2 className="w-3 h-3" />
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </aside>
      </div>

        {/* Reflectorステータスメッセージ - 右下に固定 */}
        {!showReview && (
          <div className="fixed bottom-6 right-6 text-xs text-gray-400 italic">
            <div className="flex items-center space-x-2 bg-zinc-900/80 backdrop-blur-sm px-3 py-2 rounded-lg border border-zinc-700/30 shadow-md">
              <Heart className="w-3 h-3 text-cyan-400" />
              <span>Reflector is listening...</span>
            </div>
          </div>
        )}

        {/* テキスト選択ポップアップ */}
        {showSelectionPopup && selectedText && (
          <div 
            className="fixed z-50 bg-zinc-900/95 backdrop-blur-sm border border-zinc-700/50 rounded-lg shadow-lg px-3 py-2 animate-in fade-in-up duration-200"
            style={{ 
              left: selectionPosition.x, 
              top: selectionPosition.y - 50,
              transform: 'translateX(-50%)'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex items-center space-x-2">
              <Button
                onClick={handlePinSelectedText}
                className="text-xs bg-cyan-500 hover:bg-cyan-600 text-white px-2 py-1 rounded"
              >
                📌 メモする
              </Button>
              <span className="text-xs text-gray-400 max-w-[200px] truncate">
                "{selectedText}"
              </span>
            </div>
          </div>
        )}

        {/* レビューパネル - 右側固定 */}
        {showReview && (
          <div className="fixed right-0 top-16 w-1/2 h-[calc(100vh-64px)] bg-zinc-950/95 backdrop-blur-xl border-l border-zinc-700/30 shadow-2xl transition-all duration-300 ease-in-out z-40">
            <div className="h-full flex flex-col">
              {/* レビューヘッダー */}
              <div className="flex items-center justify-between p-6 border-b border-zinc-800/30">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 rounded-lg bg-gradient-to-r from-purple-400 to-pink-400 flex items-center justify-center">
                    <Brain className="w-4 h-4 text-white" />
                  </div>
                  <div>
                    <h2 className="text-lg font-semibold text-white">📊 Session Analysis Report</h2>
                    <p className="text-xs text-zinc-500 font-medium tracking-wide">AI-Powered Learning Insights</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleCloseReview}
                  className="text-zinc-400 hover:text-zinc-200"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>

              {/* レビューコンテンツ */}
              <div className="flex-1 overflow-y-auto p-6">
                {isReviewStreaming ? (
                  <div className="space-y-6">
                    {/* 思考中演出 */}
                    <div className="flex items-center space-x-3 text-sm text-zinc-400 italic">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-zinc-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                        <div className="w-2 h-2 bg-zinc-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                        <div className="w-2 h-2 bg-zinc-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                      </div>
                      <span>Reflector is analyzing your session...</span>
                    </div>

                    {/* ストリーミングテキスト */}
                    <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-700/30 rounded-xl p-4">
                      <p className="text-sm text-zinc-300 leading-relaxed whitespace-pre-line">
                        {reviewText}
                        {isReviewStreaming && (
                          <span className="inline-block w-2 h-4 bg-zinc-300 animate-pulse ml-1" />
                        )}
                      </p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-8">
                    {/* エグゼクティブサマリー */}
                    <div className="bg-gradient-to-br from-zinc-900/80 to-zinc-800/40 backdrop-blur-sm border border-zinc-700/30 rounded-2xl p-6">
                      <div className="flex items-center space-x-3 mb-4">
                        <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center">
                          <Sparkles className="w-5 h-5 text-white" />
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">Executive Summary</h3>
                          <p className="text-xs text-zinc-400">Key findings at a glance</p>
                        </div>
                      </div>
                      <div className="bg-zinc-900/40 rounded-xl p-4 border border-zinc-700/20">
                        <p className="text-sm text-zinc-200 leading-relaxed">
                          {currentReview?.summary || reviewText || "This session demonstrates active engagement with the learning process, showing clear progression in understanding and application of concepts."}
                        </p>
                      </div>
                    </div>

                    {/* キーメトリクス */}
                    <div className="grid grid-cols-2 gap-4">
                      <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-700/30 rounded-xl p-4">
                        <div className="flex items-center space-x-2 mb-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                          <span className="text-xs font-medium text-zinc-400 uppercase tracking-wider">Engagement</span>
                        </div>
                        <div className="text-2xl font-bold text-white">92%</div>
                        <div className="text-xs text-zinc-500">High participation</div>
                      </div>
                      <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-700/30 rounded-xl p-4">
                        <div className="flex items-center space-x-2 mb-2">
                          <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                          <span className="text-xs font-medium text-zinc-400 uppercase tracking-wider">Depth</span>
                        </div>
                        <div className="text-2xl font-bold text-white">8.5/10</div>
                        <div className="text-xs text-zinc-500">Strong analysis</div>
                      </div>
                    </div>

                    {/* 主要な気づき */}
                    <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-700/30 rounded-2xl p-6">
                      <div className="flex items-center space-x-3 mb-4">
                        <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-yellow-500 to-orange-500 flex items-center justify-center">
                          <Lightbulb className="w-5 h-5 text-white" />
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">Key Insights</h3>
                          <p className="text-xs text-zinc-400">Critical discoveries & patterns</p>
                        </div>
                      </div>
                      <div className="space-y-3">
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2 flex-shrink-0"></div>
                          <p className="text-sm text-zinc-300 leading-relaxed">
                            {currentReview?.insights || reviewText || "Demonstrated strong analytical thinking with clear progression from surface-level understanding to deeper conceptual connections."}
                          </p>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2 flex-shrink-0"></div>
                          <p className="text-sm text-zinc-300 leading-relaxed">
                            "Active questioning and reflection patterns indicate a growth mindset and willingness to challenge assumptions."
                          </p>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2 flex-shrink-0"></div>
                          <p className="text-sm text-zinc-300 leading-relaxed">
                            "Clear evidence of knowledge synthesis and application across multiple contexts."
                          </p>
                        </div>
                      </div>
                    </div>

                    {/* 深掘り分析 */}
                    <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-700/30 rounded-2xl p-6">
                      <div className="flex items-center space-x-3 mb-4">
                        <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center">
                          <Target className="w-5 h-5 text-white" />
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">Deep Dive Analysis</h3>
                          <p className="text-xs text-zinc-400">Strategic perspectives & recommendations</p>
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div>
                          <h4 className="text-sm font-medium text-zinc-300 mb-2">Learning Patterns</h4>
                          <div className="bg-zinc-900/40 rounded-lg p-3 border border-zinc-700/20">
                            <p className="text-sm text-zinc-300 leading-relaxed">
                              {currentReview?.deep_dive || reviewText || "The session reveals a systematic approach to problem-solving, with clear evidence of hypothesis formation and testing."}
                            </p>
                          </div>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium text-zinc-300 mb-2">Growth Opportunities</h4>
                          <div className="bg-zinc-900/40 rounded-lg p-3 border border-zinc-700/20">
                            <p className="text-sm text-zinc-300 leading-relaxed">
                              "Consider exploring interdisciplinary connections and applying concepts to real-world scenarios for enhanced retention."
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* アクションプラン */}
                    <div className="bg-gradient-to-br from-zinc-900/80 to-zinc-800/40 backdrop-blur-sm border border-zinc-700/30 rounded-2xl p-6">
                      <div className="flex items-center space-x-3 mb-4">
                        <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center">
                          <BookOpen className="w-5 h-5 text-white" />
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">Action Plan</h3>
                          <p className="text-xs text-zinc-400">Next steps & recommendations</p>
                        </div>
                      </div>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-3">
                          <div className="w-6 h-6 rounded-full bg-blue-500/20 border border-blue-500/30 flex items-center justify-center">
                            <span className="text-xs font-bold text-blue-400">1</span>
                          </div>
                          <span className="text-sm text-zinc-300">Continue exploring advanced concepts in this domain</span>
                        </div>
                        <div className="flex items-center space-x-3">
                          <div className="w-6 h-6 rounded-full bg-green-500/20 border border-green-500/30 flex items-center justify-center">
                            <span className="text-xs font-bold text-green-400">2</span>
                          </div>
                          <span className="text-sm text-zinc-300">Apply learned concepts to practical scenarios</span>
                        </div>
                        <div className="flex items-center space-x-3">
                          <div className="w-6 h-6 rounded-full bg-purple-500/20 border border-purple-500/30 flex items-center justify-center">
                            <span className="text-xs font-bold text-purple-400">3</span>
                          </div>
                          <span className="text-sm text-zinc-300">Schedule follow-up session for deeper exploration</span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* アクションボタン */}
              {!isReviewStreaming && (
                <div className="p-6 border-t border-zinc-800/30">
                  <div className="flex space-x-3">
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex-1 bg-zinc-800/60 border-zinc-700/30 text-zinc-300 hover:bg-zinc-700/60"
                    >
                      <Save className="w-4 h-4 mr-2" />
                      Save Report
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex-1 bg-zinc-800/60 border-zinc-700/30 text-zinc-300 hover:bg-zinc-700/60"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Export PDF
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
} 